plugins {
    id 'java-library'
    id 'net.neoforged.gradle.userdev' version '7.0.184'
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    compileOnly "net.neoforged:neoforge:${neo_version}"
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.4.1'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation 'org.yaml:snakeyaml:+'
    compileOnly files("./libs/FluxNetworks-1.21.1-8.0.0.jar")
    compileOnly files("./libs/ftb-library-neoforge-2101.1.12.jar");
    compileOnly files("./libs/ftb-teams-neoforge-2101.1.2.jar")
    compileOnly files("./libs/ftb-quests-neoforge-2101.1.8.jar")
    compileOnly files("./libs/CodeChickenLib-1.21.1-4.6.0.521.jar")
    compileOnly files("./libs/EnderStorage-1.21.1-2.13.0.191.jar")
    compileOnly files("./libs/mcjtylib-1.21-9.0.8.jar")
    compileOnly files("./libs/rftoolsbase-1.21-6.0.7.jar")
    compileOnly files("./libs/xnet-1.21-7.0.4.jar")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector"          : "pl.techblock.sync.MixinConnector"
        ])
    }
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

shadowJar {
    dependencies {
        exclude(dependency('org.checkerframework:checker-qual'))
        exclude(dependency("net.java.dev.jna:jna"))
        exclude(dependency("net.java.dev.jna:jna-platform"))
        exclude(dependency("com.google.errorprone:error_prone_annotations"))
        exclude(dependency("org.slf4j:jcl-over-slf4j"))
        exclude(dependency("org.slf4j:slf4j-api"))
    }
}
'''
shadowJar {
    configurations = [project.configurations.Implementation]
}

reobf {
    shadowJar { }
}
'''